name: Documentation CI

on:
  pull_request:
    paths:
      - 'docs/**'
      - '.github/workflows/docs-ci.yml'
  push:
    paths:
      - 'docs/**'
      - '.github/workflows/docs-ci.yml'
    # No branch restrictions - runs on ANY branch when docs change
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/docs

jobs:
  build:
    name: Build Documentation Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docs
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Output image name
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Build documentation site
        run: |
          cd docs
          docker run --rm \
            -v "$(pwd)/src:/app/src:ro" \
            -v "$(pwd)/mkdocs.yml:/app/mkdocs.yml:ro" \
            -v "$(pwd)/site:/app/site" \
            ${{ steps.image.outputs.image }} uv run mkdocs build --strict
      
      - name: Upload documentation site
        uses: actions/upload-artifact@v4
        with:
          name: documentation-site
          path: docs/site/
          retention-days: 30

  pyspelling:
    name: Spell Check
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run spell checking
        run: |
          cd docs
          docker run --rm \
            -v "$(pwd)/src:/app/src:ro" \
            -v "$(pwd)/.pyspelling.yml:/app/.pyspelling.yml:ro" \
            -v "$(pwd)/.aspell.en.pws:/app/.aspell.en.pws:ro" \
            ${{ needs.build.outputs.image }} uv run pyspelling

  vale:
    name: Prose Linting
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Vale prose linting
        run: |
          cd docs
          docker run --rm \
            -v "$(pwd)/src:/app/src:ro" \
            -v "$(pwd)/.vale.ini:/app/.vale.ini:ro" \
            -v "$(pwd)/.vale:/app/.vale:ro" \
            ${{ needs.build.outputs.image }} vale src/

  markdownlint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run Markdown linting
        run: |
          cd docs
          docker run --rm \
            -v "$(pwd)/src:/app/src:ro" \
            -v "$(pwd)/.markdownlint.json:/app/.markdownlint.json:ro" \
            ${{ needs.build.outputs.image }} markdownlint src/**/*.md

  release:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [build, pyspelling, vale, markdownlint]
    if: github.event_name == 'release' || (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))) || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download documentation site
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: docs/site/
      
      - name: Create release archive
        run: |
          cd docs
          tar -czf documentation-release.tar.gz site/
      
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-release
          path: docs/documentation-release.tar.gz
          retention-days: 90

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'release' || (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))) || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download documentation site
        uses: actions/download-artifact@v4
        with:
          name: documentation-site
          path: docs/site/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/site/
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
